# 9.3 애플리케이션 아키텍처

아키텍처란 어떤 경계 안에 있는 내부 구성요소들이 어떤 책임을 갖고 있고, 어떤 방식으로 서로 관계를 맺고 동작하는지를 규정하는 것이라고 할 수 있다. 실제로 그 구조에서 일어나는 동적인 행위와 깊은 관계가 있다.

## 9.3.1 계층형 아키텍처

서로 다른 것들을 분리함으로써 분리된 각 요소의 응집도는 높여주고 서로의 결합도를 낮춰줬을 때의 장점과 유익이 무엇인지 알아보았었다.

어느 부분을 수정해야 할지를 파악하기 쉽지 않기 때문에 인터페이스와 같은 유연한 경계를 만들어두고 분리하거나 모아주는 작업이 필요하다.

### 아키텍처와 SoC

지금까지는 주로 오브젝트 레벨에서 이런 분리의 문제에 대해 생각해봤다. 성격이 다른 코드가 있는 것을 두 개의 오브젝트로 분리하고, 그 사이에 유연한 결합을 가질 수 있도록 인터페이스를 두고, 그 관계를 맺어주는 제3의 존재인 DI 컨테이너를 둬서 오브젝트끼리는 직접적인 관계를 알지 못하도록 만드는 것이 지금까지 해온 DI를 기반으로 한 유연한 설계와 구현 전략이었다.

만약 이렇게 하지 않으면 코드가 뒤섞이고 유지보수성이 떨어진다.

그렇기에 책임과 성격이 다른 것을 크게 그룹으로 만들어 분리해두는 것을 아키텍처 차원에서는 **계층형 아키텍처**라고 부른다.

또는 계층이라는 의미를 가진 영어 단어인 티어를 써서 **멀티 티어 아키텍처**라고도 한다.

보통 웹 기반의 엔터프라이즈 애플리케이션은 일반적으로 세 개의 계층을 갖는다고 해서 **3계층 애플리케이션**이라고도 한다.

### 3계층 아키텍처와 수직 계층

3계층 아키텍처는

백엔드의 DB나 레거시 시스템과 연동하는 인터페이스 역할을 하는 데이터 엑세스 계층

비즈니스 로직을 담고 있는 서비스 계층

주로 웹 기반의 UI를 만들어내고 그 흐름을 관리하는 프레젠테이션 계층으로 구분한다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0da01a99-5a0d-45ba-9b0f-4138668967c6/e8f3af26-f932-4adc-8a85-54fb12d1e8f2/Untitled.png)

데이터 엑세스 계층은 DAO 계층이라고도 불린다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0da01a99-5a0d-45ba-9b0f-4138668967c6/b9ff2e79-b701-4026-8a34-4858065995bd/Untitled.png)

서비스 계층은 이상적인 POJO로 작성됩니다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0da01a99-5a0d-45ba-9b0f-4138668967c6/3784d041-e5e1-4ad6-bceb-1a8915bf7ac1/Untitled.png)

이상적인 서비스 계층은 백엔드 시스템과 연결되는 데이터 액세스 계층이 바뀌고, 클라이언트와 연결되는 프레젠테이션 계층이 모두 바뀌어도 그대로 유지될 수 있어야 한다.

### 프레젠테이션 계층

프레젠테이션 계층은 가장 복잡한 계층이다. HTTP 프로토콜을 선호하며 서블릿 기술을 바탕으로 한다. 또한 범위가 클라이언트까지 확장할 수도 있다.

스프링은 웹 기반의 프레젠테이션 계층을 개발할 수 있는 전용 웹 프레임워크를 제공한다. 동시에 다양한 서드파티 웹 기술을 지원하기도 한다.

### 계층형 아키텍처 설계의 원칙

각 계층은 응집도가 높으면서 다른 계층과는 낮은 결합도를 유지할 수 있어야 한다.

계층 간의 강한 결합이 생기면 유연성이 떨어지기 때문에 각 계층의 내부 구현이 변화되면 다른 계층의 코드도 함께 수정해줘야한다.

## 9.3.2 애플리케이션 정보 아키텍처

데이터 중심 아키텍처는 애플리케이션에 흘러다니는 정보를 단순히 값이나 값을 담기 위한 목적의 오브젝트 형태로 취급하는 구조다.

데이터 중심 아키텍처는 핵심 비즈니스 로직을 어디에 많이 두는지에 따라서 DB에 무게를 두는 구조와 서비스 계층의 코드에 무게를 두는 구조로 구분할 수 있다.

### DB/SQL 중심의 로직 구현 방식

데이터 중심 구조의 특징은 하나의 업무 트랜잭션에 모든 계층의 코드가 종속되는 경향이 있다는 점이다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0da01a99-5a0d-45ba-9b0f-4138668967c6/9c7b92de-615e-42c4-9d3e-090f9587f371/Untitled.png)

DB 중심의 아키텍처를 선택한다면 스프링의 장점을 제대로 누릴 수 있는 기회를 얻지 못할 것이다.

SQL과 그 결과에 종속되기 시작하면 강한 결합을 만들게 되기에 조심해야 한다.

### 거대한 서비스 계층 방식

DB에는 부하가 걸리지 않도록 저장 프로시저의 사용을 자제하고 복잡한 SQL을 피하면서, 주요 로직은 서비스 계층의 코드에서 처리하도록 만드는 것이다.

이런식으로 진행하게 되면 서비스 계층이 매우 두터워진다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0da01a99-5a0d-45ba-9b0f-4138668967c6/d7d707e3-8f23-4379-b395-c2c45c1d9236/Untitled.png)

각 단위 업무별로 독립적인 개발이 가능하므로 초기 개발 속도가 빠르고, 개발자 사이에 간섭 없이 독립적인 개발이 가능하다는 장점이 있다.
