9장에서는 스프링을 이용해 애플리케이션 프로젝트를 처음 구성할 때 알아야 할 기본적인 내용을 다룬다.

# 9.1 자바 엔터프라이즈 플랫폼과 스프링 애플리케이션

## 9.1.1 클라이언트와 백엔드 시스템


스프링 엔터프라이즈 애플리케이션 서비스와 협력 구조

## 9.1.2 애플리케이션 서버

스프링으로 만든 애플리케이션을 자바 서버환경에 배포하려면 JavaEE 서버가 필요하다.

1. 경량급 WAS/서블릿 컨테이너
- 스프링은 기본적으로 톰캣이나 제티같은 가벼운 서블릿 컨테이너만 있어도 충분하다.
1. WAS
- 상대적으로 관리 기능이나 모니터링 기능이 뛰어나서 여러 대의 서버를 동시에 운영할 때 유리한 점이 많다. 또한 자바 엔터프라이즈 버전 표준을 최대한 활용할 수 있다.

무엇을 사용할지는 잘 고려해서 하면 된다.

### 스프링소스 tcServer

tcServer는 WAS는 비싸고 톰캣을 그대로 쓰기에 불안할 때 쓰기 좋은 대안이다. 가장 큰 장점은 스프링 개발회사가 개발하는 것인 만큼 스프링 애플리케이션 개발과 운영에 꼭 필요한 중요한 기능이 많이 제공된다는 점이다.

## 9.1.3 스프링 애플리케이션 배포 단위

스프링은 세 가지 단위로 배포가 가능하다.

1. 독립 웹 모듈
- 스프링은 보통 war로 패키징된 독립 웹 모듈로 배포된다.
1. 엔터프라이즈 애플리케이션
- 경우에 따라선 확장자가 ear인 엔터프라이즈 애플리케이션으로 패키징해서 배포할 수도 있다. EJB와 스프링 웹 모듈을 엔터프라이즈 애플리케이션으로 통합해야 할 때 사용한다.
1. 백그라운드 서비스 모듈
- J2EE 1.4에서 등장한 rar 패키징 방법도 있다. rar은 리소스 커넥터를 만들어 배포할 때 사용하는 방식을 말한다.

언제나 바꿀 수 있기에 너무 종속적이지 않은 것이 좋다.

# 9.2 개발도구와 환경

## 9.2.1 JavaSE와 JavaEE

### JavaSE/JDK

스프링 3.0은 JavaSE 5 버전에서 추가된 새로운 언어와 문법의 특징을 최대한 활용해 개발됐기 때문에 기본적으로 JDK 5.0 또는 그 이상을 필요로 한다.

### JavaEE/J2EE

스프링 3.0이 사용될 자바 엔터프라이즈는 플랫폼으로는 J2EE 1.4 버전이나 JavaEE 5.0이 필요하다.

## 9.2.2 IDE

스프링 애플리케이션은 자바 5 또는 그 이상의 언어를 지원하는 자바 개발도구와 스키마를 지원하는 XML 편집기 정도만 있다면 어떤 개발환경에서는 불편 없이 개발이 가능하다.

ex) IntelliJ IDEA, 이클립스를 사용한다.

## 9.2.3 SpringSource Tool Suite

스프링 애플리케이션 개발을 위한 IDE로 이클립스를 선택했다면 STS를 고려할 수 있다.

### SpringIDE 플러그인

SpringIDE의 XML 에디터의 자동완성 기능 몇 가지를 살펴보자

1. 빈 클래스 이름 자동완성
2. 빈 설정 오류검증 기능
3. 프로젝트 생성, 설정파일 생성, 빈 등록 위저드
4. 빈 의존관계 그래프
5. AOP 적용 대상 표시
6. AJDT는 AOP를 이용한 개발을 지원하는 편리한 툴이다.
7. VMCI 플러그인은 VMWare 서버 또는 워크스테이션과의 연동을 지원하는 플러그인이다.
8. 이클립스 표준 플러그인에는 WTP, EMP, Mylyn, DSDP등이 있다.

### STS 플러그인

STS 플러그인은 스프링 개발과 설정파일 편집을 지원하는 SpringIDE에 더해서 스프링 애플리케이션의 서버 배치와 같은 추가 기능을 제공해준다.

### 기타 플러그인

1. M2Eclipse는 자바의 대표적인 빌드 툴의 하나인 Maven을 지원하는 이클립스 플러그인이다.
2. AJDT는 이클립스에서 AspectJ AOP를 이용한 개발을 지원하는 편리한 툴이다.

## 9.2.4 라이브러리 관리와 빌드 툴

### 라이브러리 관리의 어려움

라이브러리마다 여러 개의 버전이 있다는 것도 문제다. 

필요한 라이브러리의 조합을 만들다 보면 복잡한 의존 관계 속에서 같은 라이브러리의 다른 버전이 동시에 필요해서 문제가 발생하기도 한다.

자바는 모듈이라는 개념이 없다. 

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0da01a99-5a0d-45ba-9b0f-4138668967c6/2f9c54e3-0fbb-4979-9882-1264032cefb7/Untitled.png)

C1.0과 C2.0에 이름이 같지만 구현이 다른 클래스가 있다면 이에 의존하고 있는 A나 B 중 하나는 비정상적으로 동작할 것이다.

이 문제를 풀 수 있는 가장 간단한 방법은 재패키징이다.

스프링이 사용하는 라이브러리의 의존 관계를 따져보면 이렇게 버전이 다르면서 같은 라이브러리를 사용하는 경우가 여럿 발견된다.

이렇게 스프링을 이용한 애플리케이션을 만들 때 필요한 라이브러리의 종류와 버전을 적절히 선정하고 개발하면서 추가적으로 필요로 하는 라이브러리를 추가하거나 제거하는 등의 관리 작업은 쉽지 않다.

### 스프링 모듈

사용할 기능과 기술 목록이 모두 만들어졌으면 일단 스프링 모듈부터 선정한다. 스프링에는 총 20개의 모듈이 있다. 일부는 거의 모든 애플리케이션에서 공통적으로 사용되는 필수 모듈이다.

모듈의 의존 관계와 주요 기능을 잘 살펴보고 필수 의존 모듈과 선택 의존 모듈을 잘 구분해서 선정하자.

### 라이브러리

스프링의 각 모듈은 또 다른 모듈에 의존하기도 하지만 오픈 소스 라이브러리 또는 표준 API를 필요로 하기도 하고 경우에 따라서는 상용 제품의 라이브러리에 의존한다. 

### 빌드 툴과 라이브러리 관리

### Maven의 특징

- **종합 프로젝트 관리 툴**: Maven은 단순 빌드 도구를 넘어 빌드, 테스트, 배치, 문서화, 리포팅 등을 지원합니다.
- **POM(Project Object Model)**: 프로젝트 구조와 특징, 의존 라이브러리 정보를 선언적으로 관리합니다.
- **자동 의존성 관리**: 필요한 라이브러리를 원격 서버에서 자동으로 다운로드하여 설치합니다.
- **전이적 의존성 추적**: 하나의 라이브러리 지정 시, 해당 라이브러리 동작에 필요한 다른 라이브러리까지 함께 다운로드합니다.

### Maven 의존 라이브러리 관리 예시

POM 파일에 의존 라이브러리를 선언하면, Maven은 이를 자동으로 다운로드하고 설치합니다.

Maven POM의 의존 라이브러리 선언

```xml
<dependencies>
    <dependency>
        <groupId>org.apache.log4j</groupId>
        <artifactId>com.springsource.org.apache.log4j</artifactId>
        <version>1.2.15</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>org.springframework.asm</artifactId>
        <version>3.0.7</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>org.springframework.core</artifactId>
        <version>3.0.7</version>
    </dependency>
</dependencies>
```

### 의존 라이브러리 그룹화

조직 내 공통적으로 사용되는 기술 목록을 정의하여, 공통 의존 라이브러리를 그룹화합니다. 이를 통해 프로젝트마다 일관된 라이브러리 구성을 쉽게 적용할 수 있습니다.

- **공통 라이브러리 그룹 (common-deps)**: 공통으로 사용하는 라이브러리 목록을 POM 파일로 정의합니다.
- **기술 그룹별 라이브러리 (e.g., springmvc-deps, hibernate-deps)**: 특정 기술에 필요한 라이브러리들을 그룹화합니다.

기술 그룹에 따른 POM을 이용해 애플리케이션 의존 라이브러리를 선언하는 예

```xml
<dependencies>
    <dependency>
        <groupId>com.mycompany.deps</groupId>
        <artifactId>common-deps</artifactId>
        <version>1.0.0</version>
        <type>pom</type>
    </dependency>
    <dependency>
        <groupId>com.mycompany.deps</groupId>
        <artifactId>springmvc-deps</artifactId>
        <version>1.0.0</version>
        <type>pom</type>
    </dependency>
</dependencies>
```

### 스프링 모듈의 두 가지 이름과 리포지토리

스프링소스의 리포지토리에서는 스프링 모듈 외의 일반 의존 라이브러리도 제공해준다.
